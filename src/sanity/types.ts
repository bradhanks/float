/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Review = {
  _type: 'review'
  author?: string
  rating?: number
  reviewBody?: string
  datePublished?: string
}

export type FaqGroup = {
  _type: 'faqGroup'
  title?: string
  faqs?: Array<
    {
      _key: string
    } & Faq
  >
}

export type Faq = {
  _type: 'faq'
  question?: string
  answer?: string
}

export type Tag = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  color?: Color
}

export type Subscriber = {
  _id: string
  _type: 'subscriber'
  _createdAt: string
  _updatedAt: string
  _rev: string
  email?: string
  name?: string
  subscribed?: boolean
  subscribedAt?: string
  unsubscribedAt?: string
  source?: 'website' | 'popup' | 'footer' | 'blog' | 'social' | 'import'
}

export type Menu = {
  _id: string
  _type: 'menu'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  location?: 'primary' | 'footer' | 'mobile' | 'social'
  items?: Array<{
    title?: string
    url?: string
    page?:
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'page'
        }
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'post'
        }
    openInNewTab?: boolean
    children?: Array<{
      title?: string
      url?: string
      page?:
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page'
          }
        | {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'post'
          }
      _key: string
    }>
    _key: string
  }>
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  excerpt?: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  coAuthors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'author'
  }>
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'category'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  publishedAt?: string
  updatedAt?: string
  status?: 'draft' | 'published' | 'scheduled' | 'private'
  featured?: boolean
  sticky?: boolean
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          blank?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Code)
    | {
        text?: string
        link?: string
        style?: 'primary' | 'secondary' | 'outline'
        _type: 'callToAction'
        _key: string
      }
  >
  readingTime?: number
  relatedPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'post'
  }>
  seo?: Seo
  faqSection?: Array<
    {
      _key: string
    } & FaqGroup
  >
  reviews?: Array<
    {
      _key: string
    } & Review
  >
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  excerpt?: string
  featuredImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          blank?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Code)
    | {
        text?: string
        link?: string
        style?: 'primary' | 'secondary' | 'outline'
        _type: 'callToAction'
        _key: string
      }
  >
  template?: 'default' | 'full-width' | 'landing' | 'contact' | 'about'
  status?: 'draft' | 'published' | 'private'
  showInNavigation?: boolean
  navigationOrder?: number
  parent?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
  publishedAt?: string
  seo?: Seo
}

export type Media = {
  _id: string
  _type: 'media'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  file?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    media?: unknown
    _type: 'file'
  }
  alt?: string
  caption?: string
  description?: string
  tags?: Array<string>
  uploadedAt?: string
}

export type Event = {
  _id: string
  _type: 'event'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          blank?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Code)
    | {
        text?: string
        link?: string
        style?: 'primary' | 'secondary' | 'outline'
        _type: 'callToAction'
        _key: string
      }
  >
  shortDescription?: string
  featuredImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  startDate?: string
  endDate?: string
  allDay?: boolean
  location?: {
    name?: string
    address?: string
    city?: string
    state?: string
    zipCode?: string
    country?: string
    coordinates?: Geopoint
  }
  organizer?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'category'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  price?: number
  maxAttendees?: number
  registrationUrl?: string
  status?: 'draft' | 'published' | 'cancelled' | 'postponed'
  featured?: boolean
  seo?: Seo
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  color?: Color
  parent?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  seo?: Seo
}

export type CaseStudy = {
  _id: string
  _type: 'caseStudy'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  seo?: Seo
}

export type Seo = {
  _type: 'seo'
  metaTitle?: string
  metaDescription?: string
  keywords?: Array<string>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  noIndex?: boolean
  canonicalUrl?: string
}

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        blank?: boolean
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      caption?: string
      _type: 'image'
      _key: string
    }
  | ({
      _key: string
    } & Code)
  | {
      text?: string
      link?: string
      style?: 'primary' | 'secondary' | 'outline'
      _type: 'callToAction'
      _key: string
    }
>

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  email?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  bio?: BlockContent
  website?: string
  social?: {
    twitter?: string
    linkedin?: string
    github?: string
    instagram?: string
  }
  isActive?: boolean
}

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}

export type Code = {
  _type: 'code'
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | Review
  | FaqGroup
  | Faq
  | Tag
  | Subscriber
  | Menu
  | Post
  | Page
  | Media
  | Event
  | Category
  | CaseStudy
  | Seo
  | BlockContent
  | Author
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | Code
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/queries.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)][0...12]{  _id,  title,  slug,  publishedAt,  excerpt,  mainImage{    asset->{      _id,      url    },    alt,    hotspot,    crop  },  author->{    _id,    name,    slug,    image->{      asset->{        _id,        url      },      alt,      hotspot,      crop    },    bio  },  categories[]->{    _id,    title,    slug  },  body[0...2]{    ...,    _type == "block" => {      children[0]{        text      }    }  }}
export type POSTS_QUERYResult = Array<{
  _id: string
  title: string | null
  slug: Slug | null
  publishedAt: string | null
  excerpt: string | null
  mainImage: {
    asset: {
      _id: string
      url: string | null
    } | null
    alt: string | null
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
  } | null
  author: {
    _id: string
    name: string | null
    slug: Slug | null
    image: null
    bio: BlockContent | null
  } | null
  categories: Array<{
    _id: string
    title: string | null
    slug: Slug | null
  }> | null
  body: Array<
    | {
        children: {
          text: string | null
        } | null
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          blank?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        text?: string
        link?: string
        style?: 'outline' | 'primary' | 'secondary'
        _type: 'callToAction'
        _key: string
      }
    | {
        _key: string
        _type: 'code'
        language?: string
        filename?: string
        code?: string
        highlightedLines?: Array<number>
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
}>
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  title,  excerpt,  "slug": slug.current,  mainImage,  body,  publishedAt,  updatedAt,  status,  featured,  sticky,  readingTime,  author->{    name,    "slug": slug.current,    image,    bio  },  coAuthors[]->{    name,    "slug": slug.current,    image  },  categories[]->{    title,    "slug": slug.current  },  tags[]->{    title,    "slug": slug.current  },  relatedPosts[]->{    title,    "slug": slug.current,    excerpt  },  seo,  "imageUrl": mainImage.asset->url}
export type PostQueryResult = {
  _id: string
  title: string | null
  excerpt: string | null
  slug: string | null
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  } | null
  body: Array<
    | ({
        _key: string
      } & Code)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          blank?: boolean
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        text?: string
        link?: string
        style?: 'outline' | 'primary' | 'secondary'
        _type: 'callToAction'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  publishedAt: string | null
  updatedAt: string | null
  status: 'draft' | 'private' | 'published' | 'scheduled' | null
  featured: boolean | null
  sticky: boolean | null
  readingTime: number | null
  author: {
    name: string | null
    slug: string | null
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    } | null
    bio: BlockContent | null
  } | null
  coAuthors: Array<{
    name: string | null
    slug: string | null
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    } | null
  }> | null
  categories: Array<{
    title: string | null
    slug: string | null
  }> | null
  tags: Array<{
    title: string | null
    slug: string | null
  }> | null
  relatedPosts: Array<{
    title: string | null
    slug: string | null
    excerpt: string | null
  }> | null
  seo: Seo | null
  imageUrl: string | null
} | null
// Variable: postPathsQuery
// Query: *[_type == "post" && defined(slug.current)][]{"params": { "slug": slug.current }}
export type PostPathsQueryResult = Array<{
  params: {
    slug: string | null
  }
}>
// Variable: categoryPathsQuery
// Query: *[_type == "post" && defined(slug.current) && references(*[_type == "category" && slug.current == $categorySlug]._id)]{  "params": { "slug": slug.current }}
export type CategoryPathsQueryResult = Array<{
  params: {
    slug: string | null
  }
}>
// Variable: tagPathsQuery
// Query: *[_type == "post" && defined(slug.current) && references(*[_type == "tag" && slug.current == $tagSlug]._id)]{  "params": { "slug": slug.current }}
export type TagPathsQueryResult = Array<{
  params: {
    slug: string | null
  }
}>
// Variable: caseStudyPathsQuery
// Query: *[_type == "caseStudy" && defined(slug.current)][]{  "params": { "slug": slug.current }}
export type CaseStudyPathsQueryResult = Array<{
  params: {
    slug: string | null
  }
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "post" && defined(slug.current)][0...12]{\n  _id,\n  title,\n  slug,\n  publishedAt,\n  excerpt,\n  mainImage{\n    asset->{\n      _id,\n      url\n    },\n    alt,\n    hotspot,\n    crop\n  },\n  author->{\n    _id,\n    name,\n    slug,\n    image->{\n      asset->{\n        _id,\n        url\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    bio\n  },\n  categories[]->{\n    _id,\n    title,\n    slug\n  },\n  body[0...2]{\n    ...,\n    _type == "block" => {\n      children[0]{\n        text\n      }\n    }\n  }\n}': POSTS_QUERYResult
    '*[_type == "post" && slug.current == $slug][0]{\n  _id,\n  title,\n  excerpt,\n  "slug": slug.current,\n  mainImage,\n  body,\n  publishedAt,\n  updatedAt,\n  status,\n  featured,\n  sticky,\n  readingTime,\n  author->{\n    name,\n    "slug": slug.current,\n    image,\n    bio\n  },\n  coAuthors[]->{\n    name,\n    "slug": slug.current,\n    image\n  },\n  categories[]->{\n    title,\n    "slug": slug.current\n  },\n  tags[]->{\n    title,\n    "slug": slug.current\n  },\n  relatedPosts[]->{\n    title,\n    "slug": slug.current,\n    excerpt\n  },\n  seo,\n  "imageUrl": mainImage.asset->url\n}': PostQueryResult
    '*[_type == "post" && defined(slug.current)][]{\n"params": { "slug": slug.current }\n}': PostPathsQueryResult
    '*[_type == "post" && defined(slug.current) && references(*[_type == "category" && slug.current == $categorySlug]._id)]{\n  "params": { "slug": slug.current }\n}': CategoryPathsQueryResult
    '*[_type == "post" && defined(slug.current) && references(*[_type == "tag" && slug.current == $tagSlug]._id)]{\n  "params": { "slug": slug.current }\n}': TagPathsQueryResult
    '*[_type == "caseStudy" && defined(slug.current)][]{\n  "params": { "slug": slug.current }\n}': CaseStudyPathsQueryResult
  }
}
